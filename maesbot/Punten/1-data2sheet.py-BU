import os  # For file system operations (paths, directories)
import yaml  # For loading YAML configuration files
import argparse  # For parsing command-line arguments
import subprocess  # For running external commands (opening file manager)
from odf.opendocument import OpenDocumentSpreadsheet  # Main ODF spreadsheet document
from odf.style import Style, TableColumnProperties, TableCellProperties, ParagraphProperties  # For styling cells and columns
from odf.table import Table, TableColumn, TableRow, TableCell  # For table structure elements
from odf.text import P  # For paragraph text elements inside cells

# Parse command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument('--input', required=True, help="Path to input YAML file")
parser.add_argument('--output', required=True, help="Path to output directory")
args = parser.parse_args()

# Load YAML punten file
with open(args.input) as f:
    data = yaml.safe_load(f)

print(f"Loaded input YAML from {args.input}")
print()

# Extract base filename (without extension) for naming output files/folders
basename = os.path.splitext(os.path.basename(args.input))[0]

# Ensure output directory exists
os.makedirs(args.output, exist_ok=True)

# Extract data from YAML with defaults
title = data.get("title", "punten")  # Get title or use "punten" as default
punten = data.get("punten", [])      # Get list of assignments/points items

# Create output folder structure: output_dir/basename/
output_folder = os.path.join(args.output, basename)
os.makedirs(output_folder, exist_ok=True)
output_file = os.path.join(output_folder, f"{basename}.ods")

# Create new OpenDocument Spreadsheet
doc = OpenDocumentSpreadsheet()
table = Table(name="Grading")

# Define column widths for the 4 columns: Description, Score, "/", Max Points
for i, width in enumerate(("15cm", "0.6cm", "0.3cm", "0.6cm")):
    # Create unique style name for each column
    style_name = f"col_{i}_{width.replace('.', '_').replace('cm', 'cm')}"
    col_style = Style(name=style_name, family="table-column")
    col_style.addElement(TableColumnProperties(columnwidth=width))
    # Add to automatic styles (styles generated by the program)
    doc.automaticstyles.addElement(col_style)
    # Apply style to table column
    table.addElement(TableColumn(stylename=style_name))

# Define cell styles - we store style names as variables to reference them later
# Gray background style for title row
grey_bg_style_name = "GreyBackground"
grey_bg_style = Style(name=grey_bg_style_name, family="table-cell")
grey_bg_style.addElement(TableCellProperties(backgroundcolor="#e5e5e5"))
doc.styles.addElement(grey_bg_style)

# Green background style for total row
green_bg_style_name = "GreenBackground"
green_bg_style = Style(name=green_bg_style_name, family="table-cell")
green_bg_style.addElement(TableCellProperties(backgroundcolor="#dde8cb"))
doc.styles.addElement(green_bg_style)

# Center-aligned text style
center_align_style_name = "CenterAlign"
center_align_style = Style(name=center_align_style_name, family="table-cell")
center_align_style.addElement(TableCellProperties())
center_align_style.addElement(ParagraphProperties(textalign="center"))
doc.styles.addElement(center_align_style)

# Left-aligned text style
left_align_style_name = "LeftAlign"
left_align_style = Style(name=left_align_style_name, family="table-cell")
left_align_style.addElement(TableCellProperties())
left_align_style.addElement(ParagraphProperties(textalign="left"))
doc.styles.addElement(left_align_style)

# Green background with left alignment (for total row description)
green_left_align_style_name = "GreenLeftAlign"
green_left_align_style = Style(name=green_left_align_style_name, family="table-cell")
green_left_align_style.addElement(TableCellProperties(backgroundcolor="#dde8cb"))
green_left_align_style.addElement(ParagraphProperties(textalign="left"))
doc.styles.addElement(green_left_align_style)

# Green background with center alignment (for total row separator)
green_center_align_style_name = "GreenCenterAlign"
green_center_align_style = Style(name=green_center_align_style_name, family="table-cell")
green_center_align_style.addElement(TableCellProperties(backgroundcolor="#dde8cb"))
green_center_align_style.addElement(ParagraphProperties(textalign="center"))
doc.styles.addElement(green_center_align_style)

def make_cell(content, formula=None, value_type="string", value=None, bg_style=None, align_style=None):
    """
    Helper function to create table cells with optional formulas, values, and styles.

    Args:
        content: Text content to display in the cell
        formula: Optional OpenDocument formula (e.g., for SUM calculations)
        value_type: Data type ("string", "float", etc.)
        value: Optional numeric value for calculations
        bg_style: Background style name
        align_style: Text alignment style name

    Returns:
        TableCell object ready to be added to a row
    """
    cell = TableCell()

    # Set formula and value attributes if provided
    if formula:
        cell.setAttribute("formula", formula)
        cell.setAttribute("valuetype", value_type)
        if value is not None:
            cell.setAttribute("value", str(value))
    elif value is not None:
        cell.setAttribute("valuetype", value_type)
        cell.setAttribute("value", str(value))
    else:
        cell.setAttribute("valuetype", value_type)

    # Create paragraph element with text content
    p = P(text=str(content))

    # Apply styles - alignment style takes precedence over background
    if bg_style and not align_style:
        cell.setAttribute("stylename", bg_style)
    elif align_style:
        cell.setAttribute("stylename", align_style)

    cell.addElement(p)
    return cell

# Create title row with gray background
title_row = TableRow()
for i in range(4):  # 4 columns total
    # Only put title text in first column, leave others empty
    content = title if i == 0 else ""
    cell = TableCell()
    cell.setAttribute("stylename", grey_bg_style_name)
    p = P(text=content)
    cell.addElement(p)
    title_row.addElement(cell)
table.addElement(title_row)

# Create rows for each assignment/grading item
start_row = 2  # Row numbering starts at 2 (after title row)
for i, a in enumerate(punten, start=start_row):
    row = TableRow()
    # Column 1: Assignment description (left-aligned)
    row.addElement(make_cell(a["desc"], align_style=left_align_style_name))
    # Column 2: Empty cell for manual score entry (numeric)
    row.addElement(make_cell("", value_type="float"))
    # Column 3: "/" separator (center-aligned)
    row.addElement(make_cell("/", align_style=center_align_style_name))
    # Column 4: Maximum points (left-aligned numeric)
    row.addElement(make_cell(a["max"], value_type="float", value=a["max"], align_style=left_align_style_name))
    table.addElement(row)

# Create totals row with automatic sum formulas
end_row = start_row + len(punten) - 1  # Last row with assignment data
total_row = TableRow()

# Column 1: "TOTAAL" label with green background
total_row.addElement(make_cell("TOTAAL", align_style=green_left_align_style_name))

# Column 2: Sum formula for all scores (B column from start_row to end_row)
total_row.addElement(
    make_cell(
        "",  # Display content will be calculated
        formula=f"of:=SUM([.B{start_row}:.B{end_row}])",  # OpenDocument formula syntax
        value_type="float",
        value=0,  # Default value
        bg_style=green_bg_style_name,
    )
)

# Column 3: "/" separator with green background
total_row.addElement(make_cell("/", align_style=green_center_align_style_name))

# Column 4: Sum formula for all maximum points (D column)
total_row.addElement(
    make_cell(
        "",  # Display content will be calculated
        formula=f"of:=SUM([.D{start_row}:.D{end_row}])",  # OpenDocument formula syntax
        value_type="float",
        value=0,  # Default value
        align_style=green_left_align_style_name,
    )
)

table.addElement(total_row)

# Add table to document and save
doc.spreadsheet.addElement(table)
doc.save(output_file)

# Print success message with colored output
print(f"\033[92müìó Sheet: {output_file}\033[0m")

# Automatically open the output folder in file manager
try:
    subprocess.run(["xdg-open", output_folder], check=True)
except subprocess.CalledProcessError:
    # Command failed (non-zero exit code)
    print(f"‚ùå Could not open folder: {output_folder}")
except FileNotFoundError:
    # xdg-open command not found on system
    print("‚ùå xdg-open not found. Please open the folder manually:")
    print(output_folder)
