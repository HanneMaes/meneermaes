import os  # For file system operations (paths, directories)
import yaml  # For loading YAML configuration files
import argparse  # For parsing command-line arguments
import subprocess  # For running external commands (opening file manager)
from odf.opendocument import OpenDocumentSpreadsheet  # Main ODF spreadsheet document
from odf.style import Style, TableColumnProperties, TableCellProperties, ParagraphProperties  # For styling cells and columns
from odf.table import Table, TableColumn, TableRow, TableCell  # For table structure elements
from odf.text import P  # For paragraph text elements inside cells

# Parse command-line arguments
parser = argparse.ArgumentParser()
parser.add_argument('--input', required=True, help="Path to input YAML file")
parser.add_argument('--output', required=True, help="Path to output directory")
parser.add_argument('--students', nargs='+', required=True, help="List of student names (space-separated)")
args = parser.parse_args()

# Load YAML punten file
with open(args.input) as f:
    data = yaml.safe_load(f)

print()
print(f"Loaded input YAML from {args.input}")
print(f"Creating sheets for {len(args.students)} students: {', '.join(args.students)}")
print()

# Extract base filename (without extension) for naming output files/folders
basename = os.path.splitext(os.path.basename(args.input))[0]

# Ensure output directory exists
os.makedirs(args.output, exist_ok=True)

# Extract data from YAML with defaults
title = data.get("title", "punten")  # Get title or use "punten" as default
punten = data.get("punten", [])      # Get list of assignments/points items

# Create output folder structure: output_dir/basename/
output_folder = os.path.join(args.output, basename)
os.makedirs(output_folder, exist_ok=True)

def create_spreadsheet(student_name, assignment_name):
    """
    Create a grading spreadsheet for a specific student.

    Args:
        student_name: Name of the student
        assignment_name: Name of the assignment (from YAML filename)

    Returns:
        Path to created .ods file
    """
    # Create new OpenDocument Spreadsheet
    doc = OpenDocumentSpreadsheet()
    table = Table(name="Grading")

    # Define column widths for the 4 columns: Description, Score, "/", Max Points
    for i, width in enumerate(("15cm", "0.6cm", "0.3cm", "0.6cm")):
        # Create unique style name for each column
        style_name = f"col_{i}_{width.replace('.', '_').replace('cm', 'cm')}"
        col_style = Style(name=style_name, family="table-column")
        col_style.addElement(TableColumnProperties(columnwidth=width))
        # Add to automatic styles (styles generated by the program)
        doc.automaticstyles.addElement(col_style)
        # Apply style to table column
        table.addElement(TableColumn(stylename=style_name))

    # Define cell styles - we store style names as variables to reference them later
    # Gray background style for title row
    grey_bg_style_name = "GreyBackground"
    grey_bg_style = Style(name=grey_bg_style_name, family="table-cell")
    grey_bg_style.addElement(TableCellProperties(backgroundcolor="#e5e5e5"))
    doc.styles.addElement(grey_bg_style)

    # Green background style for total row
    green_bg_style_name = "GreenBackground"
    green_bg_style = Style(name=green_bg_style_name, family="table-cell")
    green_bg_style.addElement(TableCellProperties(backgroundcolor="#dde8cb"))
    doc.styles.addElement(green_bg_style)

    # Center-aligned text style
    center_align_style_name = "CenterAlign"
    center_align_style = Style(name=center_align_style_name, family="table-cell")
    center_align_style.addElement(TableCellProperties())
    center_align_style.addElement(ParagraphProperties(textalign="center"))
    doc.styles.addElement(center_align_style)

    # Left-aligned text style
    left_align_style_name = "LeftAlign"
    left_align_style = Style(name=left_align_style_name, family="table-cell")
    left_align_style.addElement(TableCellProperties())
    left_align_style.addElement(ParagraphProperties(textalign="left"))
    doc.styles.addElement(left_align_style)

    # Green background with left alignment (for total row description)
    green_left_align_style_name = "GreenLeftAlign"
    green_left_align_style = Style(name=green_left_align_style_name, family="table-cell")
    green_left_align_style.addElement(TableCellProperties(backgroundcolor="#dde8cb"))
    green_left_align_style.addElement(ParagraphProperties(textalign="left"))
    doc.styles.addElement(green_left_align_style)

    # Green background with center alignment (for total row separator)
    green_center_align_style_name = "GreenCenterAlign"
    green_center_align_style = Style(name=green_center_align_style_name, family="table-cell")
    green_center_align_style.addElement(TableCellProperties(backgroundcolor="#dde8cb"))
    green_center_align_style.addElement(ParagraphProperties(textalign="center"))
    doc.styles.addElement(green_center_align_style)

    def make_cell(content, formula=None, value_type="string", value=None, bg_style=None, align_style=None):
        """
        Helper function to create table cells with optional formulas, values, and styles.

        Args:
            content: Text content to display in the cell
            formula: Optional OpenDocument formula (e.g., for SUM calculations)
            value_type: Data type ("string", "float", etc.)
            value: Optional numeric value for calculations
            bg_style: Background style name
            align_style: Text alignment style name

        Returns:
            TableCell object ready to be added to a row
        """
        cell = TableCell()

        # Set formula and value attributes if provided
        if formula:
            cell.setAttribute("formula", formula)
            cell.setAttribute("valuetype", value_type)
            if value is not None:
                cell.setAttribute("value", str(value))
        elif value is not None:
            cell.setAttribute("valuetype", value_type)
            cell.setAttribute("value", str(value))
        else:
            cell.setAttribute("valuetype", value_type)

        # Create paragraph element with text content
        p = P(text=str(content))

        # Apply styles - alignment style takes precedence over background
        if bg_style and not align_style:
            cell.setAttribute("stylename", bg_style)
        elif align_style:
            cell.setAttribute("stylename", align_style)

        cell.addElement(p)
        return cell

    # Create title row with gray background - include student name in title
    title_row = TableRow()
    for i in range(4):  # 4 columns total
        # Put combined title + student name in first column, leave others empty
        content = f"{title} - {student_name}" if i == 0 else ""
        cell = TableCell()
        cell.setAttribute("stylename", grey_bg_style_name)
        p = P(text=content)
        cell.addElement(p)
        title_row.addElement(cell)
    table.addElement(title_row)

    # Create rows for each assignment/grading item
    start_row = 2  # Row numbering starts at 2 (after title row)
    for i, a in enumerate(punten, start=start_row):
        row = TableRow()
        # Column 1: Assignment description (left-aligned)
        row.addElement(make_cell(a["desc"], align_style=left_align_style_name))
        # Column 2: Empty cell for manual score entry (numeric)
        row.addElement(make_cell("", value_type="float"))
        # Column 3: "/" separator (center-aligned)
        row.addElement(make_cell("/", align_style=center_align_style_name))
        # Column 4: Maximum points (left-aligned numeric)
        row.addElement(make_cell(a["max"], value_type="float", value=a["max"], align_style=left_align_style_name))
        table.addElement(row)

    # Create totals row with automatic sum formulas
    end_row = start_row + len(punten) - 1  # Last row with assignment data
    total_row = TableRow()

    # Column 1: "TOTAAL" label with green background
    total_row.addElement(make_cell("TOTAAL", align_style=green_left_align_style_name))

    # Column 2: Sum formula for all scores (B column from start_row to end_row)
    total_row.addElement(
        make_cell(
            "",  # Display content will be calculated
            formula=f"of:=SUM([.B{start_row}:.B{end_row}])",  # OpenDocument formula syntax
            value_type="float",
            value=0,  # Default value
            bg_style=green_bg_style_name,
        )
    )

    # Column 3: "/" separator with green background
    total_row.addElement(make_cell("/", align_style=green_center_align_style_name))

    # Column 4: Sum formula for all maximum points (D column)
    total_row.addElement(
        make_cell(
            "",  # Display content will be calculated
            formula=f"of:=SUM([.D{start_row}:.D{end_row}])",  # OpenDocument formula syntax
            value_type="float",
            value=0,  # Default value
            align_style=green_left_align_style_name,
        )
    )

    table.addElement(total_row)

    # Add table to document and save
    doc.spreadsheet.addElement(table)

    # Create filename: student-assignment.ods
    safe_student_name = student_name.replace("/", "_")  # Make filename safe
    output_file = os.path.join(output_folder, f"{safe_student_name} - {assignment_name}.ods")
    doc.save(output_file)

    return output_file

# Create spreadsheet for each student
created_files = []
for student in args.students:
    output_file = create_spreadsheet(student, basename)
    created_files.append(output_file)
    print(f"\033[92müìó Created: {os.path.basename(output_file)}\033[0m")

print()
print(f"‚úÖ Successfully created {len(created_files)} spreadsheet(s) in: {output_folder}")

# Automatically open the output folder in file manager
try:
    subprocess.run(["xdg-open", output_folder], check=True)
except subprocess.CalledProcessError:
    # Command failed (non-zero exit code)
    print(f"‚ùå Could not open folder: {output_folder}")
except FileNotFoundError:
    # xdg-open command not found on system
    print("‚ùå xdg-open not found. Please open the folder manually:")
    print(output_folder)

######################################################################################################
# GUIDE

# $ python3 1-data2sheet.py --input "/home/hanne/Documents/meneermaes/docs/_data/hardware/servers.yaml" --output "/home/hanne/Documents/Nextcloud/School/maesbot-private-data/Punten/Generated Output/" --students "Jan Janssen" "Marie Peeters" "Tom De Vries" "Lisa Van Damme"
